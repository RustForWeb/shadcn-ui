use tailwind_fuse::{TwClass, TwVariant};
use yew::prelude::*;
use yew_struct_component::{StructComponent, struct_component};
use yew_style::Style;

#[derive(TwClass)]
#[tw(class = "{{base_classes}}")]
pub struct {{component_name}}Class;

#[derive(PartialEq, Properties)]
pub struct {{component_name}}Props {
    {{#each props}}
    #[prop_or_default]
    pub {{name}}: {{prop_type}},
    {{/each}}

    // Global attributes
    #[prop_or_default]
    pub class: Option<String>,
    #[prop_or_default]
    pub id: Option<String>,
    #[prop_or_default]
    pub style: Style,

    #[prop_or_default]
    pub node_ref: NodeRef,
    #[prop_or_default]
    pub children: Html,
}

#[function_component]
pub fn {{component_name}}(props: &{{component_name}}Props) -> Html {
    let class = use_memo(
        props.class.clone(),
        |class| {
            {{component_name}}Class
                .with_class(class.clone().unwrap_or_default())
        },
    );

    html! {
        <{{html_tag}}
            ref={props.node_ref.clone()}
            class={(*class).clone()}
            id={props.id.clone()}
            style={props.style.clone()}
        >
            {props.children.clone()}
        </{{html_tag}}>
    }
}